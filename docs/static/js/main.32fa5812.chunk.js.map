{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","color","Math","random","toString","style","backgroundColor","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGrid","image","key","GifExpertApp","categories","width","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMhB,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,YCKZG,EAVK,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEvBC,EAAQ,MAAM,GAAG,IAAIC,KAAKC,SAAS,GAAGC,SAAS,IACrD,OACI,yBAAKC,MAAO,CAACC,gBAAiBL,GAAQM,UAAU,0CAC5C,yBAAKC,IAAKR,EAAKS,IAAKV,M,uBCPnBW,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbZ,EADa,iDACmCa,UAAUF,GAD7C,+DAEAG,MAAMd,GAFN,cAEbe,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLtB,GAAIsB,EAAItB,GACRC,MAAOqB,EAAIrB,MACXC,IAAG,UAAEoB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBtB,QATnB,kBAaZkB,GAbY,4CAAH,sDCqBLK,EAlBa,SAACZ,GAAc,IAAD,EACd3B,mBAAS,CACjCiC,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACC,GAAD,OACrBH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAGZ,CAACb,IAEGc,GCGMK,EAjBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,EACCY,EAAaZ,GAAjCU,EADmB,EACxBJ,KAAaO,EADW,EACXA,QAErB,OACE,oCACE,wBAAIjB,UAAU,qCAAqCI,GAClDa,GAAW,uBAAGjB,UAAU,oCAAb,cAEZ,yBAAKA,UAAU,aACVc,EAAOF,KAAI,SAACY,GAAD,OACV,kBAAC,EAAD,eAAaC,IAAKD,EAAMjC,IAAQiC,UCV/BE,EAAe,WAAO,IAAD,EACIjD,mBAAS,CAC3C,SAF8B,mBACzBkD,EADyB,KACbnD,EADa,KAKhC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAEzBmD,EAAWf,KAAI,SAACR,GAAD,OACd,kBAAC,EAAD,CAASqB,IAAKrB,EAAUA,SAAUA,OALxC,cAQe,yBAAKH,IAAI,kCAAkCC,IAAI,aAAaJ,MAAO,CAAC8B,MAAM,QCZ7FC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.32fa5812.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if( inputValue.trim().length > 2 ){\r\n        setCategories(cats => [inputValue, ...cats]);\r\n        setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n\r\n    const color = \"#\"+((1<<24)*Math.random()|0).toString(16);\r\n    return ( \r\n        <div style={{backgroundColor: color}} className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default GifGridItem;","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=IT86JET54uHHy50PVWzeMYtMBbFew6ZG`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n\r\n    return gifs;\r\n  };","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) =>\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      })\r\n    );\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n\r\nexport default useFetchGifs;\r\n","import React from \"react\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport useFetchGifs from \"../hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data:images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n\r\n      <div className=\"card-grid\">\r\n          {images.map((image) => (\r\n            <GifGridItem key={image.id} {...image} />\r\n          ))}\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\r\n    \"Cats\",\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n\r\n        Powered by <img src=\"https://i.imgur.com/9CzicZH.png\" alt=\"Giphy Logo\" style={{width:60}} />\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}